/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.generated;

import com.example.generated.api.TroubleExamplesControllerApi;
import com.example.generated.model.InlineObject1;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.log.ErrorLoggingFilter;
import io.restassured.http.ContentType;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.List;

/**
 * API tests for TroubleExamplesControllerApi
 */
@Slf4j
@SpringBootTest
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class TroubleExamplesControllerApiTest {

    private TroubleExamplesControllerApi api;

    @BeforeEach
    public void createApi() {
        api = ApiClient.api(ApiClient.Config.apiConfig().reqSpecSupplier(
                () -> new RequestSpecBuilder()

                        .setAccept("*/*")
                        .setAccept(ContentType.BINARY)
                        .setContentType("*/*")
                        .addFilter(new ErrorLoggingFilter())
                        .setBaseUri("http://localhost:8080"))).troubleExamplesController();
    }

    /**
     * OK
     */
    @Test
    @Disabled("default mapping dont work for List<byte[]>")
    public void shouldSee200AfterGetByteArray() {
        var response = api.getByteArray()
                .body("[]").executeAs(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * OK
     */
    @Test
    public void shouldSee200AfterGetListFiles() {
        InlineObject1 inlineObject1 = new InlineObject1();
        var response = api.getListFiles()
                .body(inlineObject1).executeAs(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * OK
     */
    @Test
    public void shouldSee200AfterGetListString() {
        List<String> strings = List.of("Test");
        var response = api.getListString()
                .stringsQuery(strings).executeAs(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * OK
     */
    @Test
    public void shouldSee200AfterGetRawByteArray() {
        var response = api.getRawByteArray()
                .respSpec(spec -> spec.expectContentType(ContentType.BINARY))
                .body("[]").execute(r -> r.asByteArray());
        // TODO: test validations
    }

    /**
     * OK
     */
    @Test
    public void shouldSee200AfterGetRawByteArrayFix() {
        var response = api.getRawByteArrayFix()
                .respSpec(spec -> spec.expectContentType(ContentType.BINARY))
                .body("[]").execute(r -> r.asByteArray());
        // TODO: test validations
    }

    /**
     * OK
     */
    @Test
    public void shouldSee200AfterGetRawListFiles() {
        var response = api.getRawListFiles()
                .body("[]").executeAs(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * OK
     */
    @Test
    public void shouldSee200AfterGetRawListString() {
        List<String> strings = List.of("Test");
        var response = api.getRawListString()
                .stringsQuery(strings).executeAs(r -> r.prettyPeek());
        // TODO: test validations
    }
}