/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.generated;

import com.example.generated.api.UserControllerApi;
import com.example.generated.model.User;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.log.ErrorLoggingFilter;
import io.restassured.response.Response;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.function.Function;

import static com.example.generated.GsonObjectMapper.gson;
import static io.restassured.config.ObjectMapperConfig.objectMapperConfig;
import static io.restassured.config.RestAssuredConfig.config;


/**
 * API tests for UserControllerApi
 */
@Slf4j
@SpringBootTest
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class UserControllerApiTest {

    private UserControllerApi api;
    private User testUser;

    private final Function<Response, Response> successAssertions = r -> {
        r.prettyPeek();
        r.then().statusCode(200);
        r.then().contentType("application/json");
        return r;
    };

    private final Function<Response, Response> errorAssertions = r -> {
        r.prettyPeek();
        r.then().statusCode(404);
        r.then().contentType("application/json");
        return r;
    };

    @BeforeEach
    public void createApi() {
        api = ApiClient.api(ApiClient.Config.apiConfig().reqSpecSupplier(
                () -> new RequestSpecBuilder()
                        .setConfig(config().objectMapperConfig(objectMapperConfig().defaultObjectMapper(gson())))
                        .addFilter(new ErrorLoggingFilter())
                        .setBaseUri("http://localhost:8080"))).userController();

        User user = new User();
        user.setAge(25L);
        user.setFirstName("Test");
        user.setLastName("OfTest");
        var response = api.addNewUser().body(user).executeAs(successAssertions);

        testUser = response.getResult();
    }

    /**
     * OK
     */
    @Test
    public void shouldSee200AfterDeleteUser() {
        Long id = testUser.getId();
        var response = api.deleteUser().idPath(id).executeAs(successAssertions);
        // test validations
        Assertions.assertEquals(testUser, response.getResult());
    }

    /**
     * User not found
     */
    @Test
    public void shouldSee404AfterDeleteUser() {
        Long id = -1L;
        var response = api.deleteUser().idPath(id).executeAs(errorAssertions);
        // test validations
        Assertions.assertEquals("user with id -1 doesn't exist!", response.getError().getMessage());
    }

    /**
     * OK
     */
    @Test
    public void shouldSee200AfterGetStaticUser() {
        var id = 1L;
        var response = api.getStaticUser()
                .idQuery(id).executeAs(successAssertions);
        // test validations
        var expectedUser = new User();
        expectedUser.setId(id);
        expectedUser.setFirstName("Test");
        expectedUser.setLastName("");
        expectedUser.setAge(99L);
        Assertions.assertEquals(expectedUser, response.getResult());
    }

    /**
     * OK
     */
    @Test
    public void shouldSee200AfterGetUser() {
        Long id = testUser.getId();
        var response = api.getUser()
                .idPath(id).executeAs(successAssertions);
        // test validations
        Assertions.assertEquals(testUser, response.getResult());
    }

    /**
     * User not found
     */
    @Test
    public void shouldSee404AfterGetUser() {
        Long id = -1L;
        var response = api.getUser()
                .idPath(id).executeAs(errorAssertions);
        // test validations
        Assertions.assertEquals("user with id -1 doesn't exist!", response.getError().getMessage());
    }

    /**
     * OK
     */
    @Test
    public void shouldSee200AfterUpdateUser() {
        testUser.setAge(2L);
        var response = api.updateUser()
                .body(testUser).executeAs(successAssertions);
        // test validations
        Assertions.assertEquals(testUser, response.getResult());
    }

    /**
     * User not found
     */
    @Test
    public void shouldSee404AfterUpdateUser() {
        User user = new User();
        user.setId(-1L);
        var response = api.updateUser()
                .body(user).executeAs(errorAssertions);
        // test validations
        Assertions.assertEquals(
                "user with id -1 doesn't exist!",
                response.getError().getMessage()
        );
    }
}